Linux Boot process and sytem logging

BIOS
BIOS stands for Basic Input Output System.
It's a special type of firmware used in the booting process, and it's the first piece of software that is run when a computer is powered on. The BIOS is
operating system independent.

The BIOS contains a list of boot devices such as hard disks, a DVD drive, USB devices, and others, depending on the hardware being used. 

Boot loaders
LILO - linux loader
LILO stands for Linux Loader, while GRUB stands for Grand Unified Bootloader.

Initial RAM disk
initrd - initial RAM disk
temporary file system that's loaded from disk and stored in memory



Disk management
Partitions-
Disks can be divided into parts, called partitions
partitions allow you to seprate data
Partitions schemes
1.OS 2)applications, 3)user, 4)swap
1.OS, 2)user home directories 
As a syetem administrator, you decide

MBR 
Master Boot Record
can only address 2TB of disk space
Beign phased out by GPT
4 primary partitions
extended partitions allow you to create logical partitions



partition
 fdisk -l
Disk /dev/loop0: 50.93 MiB, 53399552 bytes, 104296 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes


Disk /dev/loop1: 73.91 MiB, 77500416 bytes, 151368 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes


Disk /dev/loop2: 4.42 MiB, 4636672 bytes, 9056 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes


Disk /dev/nvme0n1: 30 GiB, 32213303296 bytes, 62916608 sectors
Disk model: MSFT NVMe Accelerator v1.0
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 262144 bytes
Disklabel type: gpt
Disk identifier: 6C4E8ECD-CA47-4732-966E-3C5DAAF4385C

Device            Start      End  Sectors  Size Type
/dev/nvme0n1p1  2099200 62916574 60817375   29G Linux filesystem
/dev/nvme0n1p14    2048    10239     8192    4M BIOS boot
/dev/nvme0n1p15   10240   227327   217088  106M EFI System
/dev/nvme0n1p16  227328  2097152  1869825  913M Linux extended boot


useradmin@demo:/$ fdisk /dev/loop2
Welcome to fdisk (util-linux 2.39.3).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.

Command (m for help): m
Help:

  DOS (MBR)
   a   toggle a bootable flag
   b   edit nested BSD disklabel
   c   toggle the dos compatibility flag

  Generic
   d   delete a partition
   F   list free unpartitioned space
   l   list known partition types
   n   add a new partition
   p   print the partition table
   t   change a partition type
   v   verify the partition table
   i   print information about a partition

  Misc
   m   print this menu
   u   change display/entry units
   x   extra functionality (experts only)

  Script
   I   load disk layout from sfdisk script file
   O   dump disk layout to sfdisk script file

  Save & Exit
   w   write table to disk and exit
   q   quit without saving changes

  Create a new label
   g   create a new empty GPT partition table
   G   create a new empty SGI (IRIX) partition table
   o   create a new empty MBR (DOS) partition table
   s   create a new empty Sun partition table

Command (m for help): n
Partition type
   p   primary (0 primary, 0 extended, 4 free)
   e   extended (container for logical partitions)
Select (default p): p
Partition number (1-4, default 1):


